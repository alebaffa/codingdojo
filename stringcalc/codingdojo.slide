Coding Dojo
Software Craftsmanship Community
29 Oct 2015
Tags: tdd coding dojo scc

Alessandro Baffa
Christian Ceelen
Przemyslaw Koziel

 
* Coding Dojo Mindset
 
- We are here to learn
- Focus on doing it right
- Collaborative environment
- Safe place outside work

* Dojo Structure

- Introduction : *15'*
- Coding : *30'* (5 min / person)(randori).
- Break
- Coding : *30'(pair programming)*
- Retrospective : *15'*
- *Total* : more or less 2h

* What is your level of TDD?

- It is a some kind of sorcery
- I had contact with it but still don't trust it
- I am comfortable with it (using at work)
- I did TDD with Kent Beck

* TDD, what is it?

- It is not about testing first(but it brings those benefits)
- It is about design(officially yes)
- Work flow?

* The Three Laws of TDD

- You must write a failing test before you write any production code.
- You must not write more of a test than is sufficient to fail, or fail to compile.
- You must not write more production code than is sufficient to make the currently failing test pass.

* Red-Green-Refactor

- Create a unit tests that fails
- Write production code that makes that test pass
- Clean up the mess you just made.

* AAA

-Arrange (Given)
-Act (When)
-Assert (Then)

* Today kata - String Calculator

.image ./calculator.jpg

* Task 1

- Create a String calculator (class) with a method *Add* that accepts a string and returns a number.
	int Add(string numbers)
- *Start* *simple* : an _empty_ _string_, then _one_ and then _two_ numbers
- *Refactor* after each passing test

* Task 2
- Allow the Add method to handle an unknown amount of numbers
	int Add(string numbers...)

* Task 3
- Allow the Add method to handle new lines between numbers (instead of commas)
	OK: "1\n2,3 = 6"
	KO: "1,\n"

* Other tasks are printed
.image ./logo.jpg  500 500